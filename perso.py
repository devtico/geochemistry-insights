# -*- coding: utf-8 -*-
"""perso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y-naUI1S4Ek_uBoJKAqwAgi1V3rmjP7Y
"""


def sumaEst(bd):
  """
  bd -> pd.DataFrame
  
  Essa função escreve um sumário estatístico detalhado para  os valores
  numéricos de um DataFrame.

  By: Heitor Nóbrega Tico
  """
  import pandas as pd
  import numpy as np
  pd.set_option('display.float_format', lambda x: '%.3f' % x)
  cdb = bd.select_dtypes(include=['float64', 'int'])
  contagem = pd.DataFrame(cdb.count()).T
  media = pd.DataFrame(cdb.mean()).T
  variancia = pd.DataFrame(cdb.var()).T
  desvipad = pd.DataFrame(cdb.std()).T
  cv = desvipad/media
  minimo = pd.DataFrame(cdb.min()).T
  q1 = pd.DataFrame(cdb.quantile(q=0.25)).T
  q1.index=['0']
  q2 = pd.DataFrame(cdb.quantile(q=0.50)).T
  q2.index=['0']
  q3 = pd.DataFrame(cdb.quantile(q=0.75)).T
  q3.index=['0']
  maximo = pd.DataFrame(cdb.max()).T
  curtose = pd.DataFrame(cdb.kurtosis()).T
  skewness = pd.DataFrame(cdb.skew()).T
  iqa = np.subtract(q3,q1)
  fator_outlier = iqa*1.5
  fator_extremo = iqa*3
  outSup = np.add(q3, fator_outlier)
  outInf = np.subtract(q1, fator_outlier)
  extSup = np.add(q3, fator_extremo)
  extInf = np.subtract(q1, fator_extremo)
  lsrang = outSup.columns.to_list()
  numStorSupe = []
  for c, v in enumerate(lsrang):
    i = outSup.values[0][c]
    f = extSup.values[0][c]
    bdgen = len(cdb.loc[(cdb[v] > i) & (cdb[v] <= f)])
    numStorSupe.append(bdgen)
  numOutSup = pd.DataFrame(numStorSupe).T
  numOutSup.columns = cdb.columns
  lsrang = outInf.columns.to_list()
  numStorInfe = []
  for c, v in enumerate(lsrang):
    i = outInf.values[0][c]
    f = extInf.values[0][c]
    bdgen = len(cdb.loc[(cdb[v] < i) & (cdb[v] >= f)])
    numStorInfe.append(bdgen)
  numOutInf = pd.DataFrame(numStorInfe).T
  numOutInf.columns = cdb.columns
  lsrang = extSup.columns.to_list()
  numStorExtSupe = []
  for c, v in enumerate(lsrang):
    h = extSup.values[0][c]
    bdgen = len(cdb.loc[(cdb[v] > h)])
    numStorExtSupe.append(bdgen)
  numExtSup = pd.DataFrame(numStorExtSupe).T
  numExtSup.columns = cdb.columns
  lsrang = extInf.columns.to_list()
  numStorExtInfe = []
  for c, v in enumerate(lsrang):
    h = extInf.values[0][c]
    bdgen = len(cdb.loc[(cdb[v] < h)])
    numStorExtInfe.append(bdgen)
  numExtInf = pd.DataFrame(numStorExtInfe).T
  numExtInf.columns = cdb.columns
  sumario = pd.concat([contagem, media, variancia, desvipad, cv, minimo, q1, q2, q3,
                     maximo, skewness, curtose, outSup, numOutSup, outInf,
                     numOutInf, extSup, numExtSup, extInf, numExtInf])
  sumario.index = ['contagem', 'média','variância', 'desvio padrão', 'coeficiente de variação','mínimo',
                   'q1', 'q2', 'q3', 'máximo', 'skewness', 'curtose',
                   'início ouliers superiores', 'n° outliers superiores',
                   'início outliers inferiores', 'n° outliers inferiores',
                   'início extremos superiores', 'n° extremos superiores',
                   'início extremos inferiores', 'n° extremos inferiores']
  return sumario

  


def montSet(arq):
    """
    Essa função retorna os únicos valores presentes em uma coluna de um
    dataframe.
    
    arq -> df.coluna1
    
    By: Heitor Nóbrega Tico
    """
    l = arq.to_list()
    return set(l)